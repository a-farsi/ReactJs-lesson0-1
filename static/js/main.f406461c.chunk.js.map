{"version":3,"sources":["Person.js","InputTextField.js","App.js","serviceWorker.js","index.js"],"names":["Person","props","className","onClick","click","name","occupation","InputTextField","type","onChange","changed","value","App","state","persons","occupatoin","age","switchNameHandler","newName","setState","nameChangeHandler","event","target","style","backgroundcolor","font","border","padding","cursor","this","bind","console","log","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qTAceA,G,YAXA,SAAAC,GACb,OACE,yBAAKC,UAAU,cAEb,uBAAGC,QAASF,EAAMG,OAAlB,OACOH,EAAMI,KADb,yBACyCJ,EAAMK,eCMtCC,G,MAXQ,SAAAN,GACrB,OACE,2BACEC,UAAU,sBACVM,KAAK,OACLC,SAAUR,EAAMS,QAChBC,MAAOV,EAAMI,SC0FJO,E,2MA7FbC,MAAQ,CACNC,QAAS,CACP,CAAET,KAAM,QAASU,WAAY,UAAWC,IAAK,IAC7C,CAAEX,KAAM,SAAUU,WAAY,aAAcC,IAAK,IACjD,CAAEX,KAAM,QAASU,WAAY,YAAaC,IAAK,M,EAGnDC,kBAAoB,SAAAC,GAClB,EAAKC,SAAS,CACZL,QAAS,CACP,CAAET,KAAM,aAAcU,WAAY,YAAaC,IAAK,IACpD,CAAEX,KAAMa,EAASH,WAAY,aAAcC,IAAK,IAChD,CAAEX,KAAM,QAASU,WAAY,YAAaC,IAAK,Q,EAKrDI,kBAAoB,SAAAC,GAClB,EAAKF,SAAS,CACZL,QAAS,CACP,CAAET,KAAM,aAAcU,WAAY,YAAaC,IAAK,IACpD,CAAEX,KAAM,UAAWU,WAAY,aAAcC,IAAK,IAClD,CAAEX,KAAMgB,EAAMC,OAAOX,MAAOI,WAAY,YAAaC,IAAK,Q,wEAKtD,IAAD,OACDO,EAAQ,CACZC,gBAAiB,QACjBC,KAAM,WACNC,OAAQ,iBACRC,QAAS,MACTC,OAAQ,WAEV,OACE,yBAAK1B,UAAU,OACb,wDACA,uDAC4B2B,KAAKhB,MAAMC,QAAQ,GAAGT,KADlD,yBAEiBwB,KAAKhB,MAAMC,QAAQ,GAAGC,YAGvC,4BAAQQ,MAAOA,EAAOpB,QAAS,kBAAM,EAAKc,kBAAkB,aAA5D,eAGA,kBAAC,EAAD,CACEZ,KAAMwB,KAAKhB,MAAMC,QAAQ,GAAGT,KAC5BC,WAAYuB,KAAKhB,MAAMC,QAAQ,GAAGC,aAEpC,yDAC8Bc,KAAKhB,MAAMC,QAAQ,GAAGT,KADpD,yBAEiBwB,KAAKhB,MAAMC,QAAQ,GAAGC,YAGvC,4BACEQ,MAAOA,EACPpB,QAAS0B,KAAKZ,kBAAkBa,KAAKD,KAAM,eAF7C,eAOA,kBAAC,EAAD,CACExB,KAAMwB,KAAKhB,MAAMC,QAAQ,GAAGT,KAC5BC,WAAYuB,KAAKhB,MAAMC,QAAQ,GAAGC,WAClCX,MAAO,WACL,EAAKa,kBAAkB,kBAG3B,uDAC4BY,KAAKhB,MAAMC,QAAQ,GAAGT,KADlD,yBAEiBwB,KAAKhB,MAAMC,QAAQ,GAAGC,YAEvC,4BACEQ,MAAOA,EACPpB,QAAS,kBAAM4B,QAAQC,IAAI,+BAF7B,eAOA,kBAAC,EAAD,CACE3B,KAAMwB,KAAKhB,MAAMC,QAAQ,GAAGT,KAC5BC,WAAYuB,KAAKhB,MAAMC,QAAQ,GAAGC,aAEpC,kBAAC,EAAD,CACEL,QAASmB,KAAKT,kBACdf,KAAMwB,KAAKhB,MAAMC,QAAQ,GAAGT,Y,GAvFpB4B,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.f406461c.chunk.js","sourcesContent":["import React from \"react\";\r\nimport './Person.css';\r\n\r\nconst Person = props => {\r\n  return (\r\n    <div className=\"personComp\">\r\n      {/*When the paragraph is clicked, the method in the parent is called*/}\r\n      <p onClick={props.click}>\r\n        I'm {props.name} and my occupation is {props.occupation}\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Person;\r\n","import React from \"react\";\r\nimport \"./InputTextField.css\";\r\n\r\nconst InputTextField = props => {\r\n  return (\r\n    <input\r\n      className=\"inputTextFieldStyle\"\r\n      type=\"text\"\r\n      onChange={props.changed}\r\n      value={props.name}\r\n    ></input>\r\n  );\r\n};\r\n\r\nexport default InputTextField;\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Person from \"./Person\";\nimport InputTextField from \"./InputTextField\";\n\nclass App extends Component {\n  state = {\n    persons: [\n      { name: \"Piotr\", occupatoin: \"teacher\", age: 30 },\n      { name: \"tomasz\", occupatoin: \"researcher\", age: 45 },\n      { name: \"Marta\", occupatoin: \"secretary\", age: 42 }\n    ]\n  };\n  switchNameHandler = newName => {\n    this.setState({\n      persons: [\n        { name: \"Uotatozisc\", occupatoin: \"Professor\", age: 30 },\n        { name: newName, occupatoin: \"researcher\", age: 45 },\n        { name: \"Marta\", occupatoin: \"secretary\", age: 42 }\n      ]\n    });\n  };\n\n  nameChangeHandler = event => {\n    this.setState({\n      persons: [\n        { name: \"Uotatozisc\", occupatoin: \"Professor\", age: 30 },\n        { name: \"Wanadoo\", occupatoin: \"researcher\", age: 45 },\n        { name: event.target.value, occupatoin: \"secretary\", age: 42 }\n      ]\n    });\n  };\n\n  render() {\n    const style = {\n      backgroundcolor: \"white\",\n      font: \"inherent\",\n      border: \"1px solid bleu\",\n      padding: \"8px\",\n      cursor: \"pointer\"\n    };\n    return (\n      <div className=\"App\">\n        <h1>This lesson is for state</h1>\n        <p>\n          The first person name is {this.state.persons[0].name} and my\n          occupatoin is {this.state.persons[0].occupatoin}\n        </p>\n        {/*arrow function to pass paramter to a function*/}\n        <button style={style} onClick={() => this.switchNameHandler(\"Perirra\")}>\n          Switch Name\n        </button>\n        <Person\n          name={this.state.persons[0].name}\n          occupation={this.state.persons[0].occupatoin}\n        ></Person>\n        <p>\n          The seconde person name is {this.state.persons[1].name} and my\n          occupatoin is {this.state.persons[1].occupatoin}\n        </p>\n        {/*Binding to pass paramter to a function*/}\n        <button\n          style={style}\n          onClick={this.switchNameHandler.bind(this, \"Maximilian\")}\n        >\n          Switch Name\n        </button>\n        {/*Passing method's reference to the children component as props*/}\n        <Person\n          name={this.state.persons[1].name}\n          occupation={this.state.persons[1].occupatoin}\n          click={() => {\n            this.switchNameHandler(\"Switzerland\");\n          }}\n        ></Person>\n        <p>\n          The third person name is {this.state.persons[2].name} and my\n          occupatoin is {this.state.persons[2].occupatoin}\n        </p>\n        <button\n          style={style}\n          onClick={() => console.log(\"button 3rd person clicked\")}\n        >\n          Switch Name\n        </button>\n        {/*Pass a method's reference to a children component*/}\n        <Person\n          name={this.state.persons[2].name}\n          occupation={this.state.persons[2].occupatoin}\n        ></Person>\n        <InputTextField\n          changed={this.nameChangeHandler}\n          name={this.state.persons[2].name}\n        ></InputTextField>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}